1).Why can't we assign unsigned and signed for float and double data types?           Answer:Because they inherently include a sign bit to represent both positive and negative values. Floating-point numbers are designed with a combination of sign, exponent, and mantissa to accommodate a wide range of values, including fractions and very large or very small numbers. The inclusion of an unsigned variant would complicate their design without providing practical benefits, as their current representation already covers the necessary range and precision for most applications. Consequently, the concept of unsigned types is specific to integers and doesn't apply to floating-point numbers.

2).Try to assign -ve values with unsigned short.              
 Answer:
#include <stdio.h>

int main() {
    unsigned short value = -1;
    printf("Value: %u\n", value); // Output will be 65535
    return 0;
}

3).Try relational operators with charactr data type.            Answer:relational operators can be used with the char data type, just like with other integer types. Characters are internally represented by their ASCII values (or another character encoding), so relational comparisons are based on these integer values. For Example:
#include <stdio.h>

int main() {
    char a = 'a'; // ASCII value 97
    char b = 'b'; // ASCII value 98
    char c = 'a'; // ASCII value 97

    printf("a < b: %d\n", a < b);  // Output will be 1 (true)
    printf("a > b: %d\n", a > b);  // Output will be 0 (false)
    printf("a == c: %d\n", a == c); // Output will be 1 (true)
    printf("a != b: %d\n", a != b); // Output will be 1 (true)

    return 0;
}

4).Try logical operators with different data types.  
#include <stdio.h>
int main() {
    int x = 5, y = 0;
    float a = 1.5, b = 0.0;
    char c = 'A', d = '\0'; // '\0' is the null character with ASCII value 0
    int *ptr1 = &x, *ptr2 = NULL;

    printf("x && y: %d\n", x && y); // 0 (false, because y is zero)
    printf("a || b: %d\n", a || b); // 1 (true, because a is non-zero)
    printf("!c: %d\n", !c);         // 0 (false, because c is non-zero)
    printf("!d: %d\n", !d);         // 1 (true, because d is zero)
    printf("ptr1 && ptr2: %d\n", ptr1 && ptr2); // 0 (false, because ptr2 is NULL)
    printf("ptr1 || ptr2: %d\n", ptr1 || ptr2); // 1 (true, because ptr1 is non-NULL)
    printf("!ptr1: %d\n", !ptr1); // 0 (false, because ptr1 is non-NULL)

    return 0;
}




